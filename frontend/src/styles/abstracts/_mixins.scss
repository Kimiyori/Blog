@use "../abstracts/variables";

@mixin for-size($size) {
    @if $size == xs {
        @media (max-width: 599px) {
            @content;
        }
    } @else if $size == sm {
        @media (min-width: 600px) and (max-width: 899px) {
            @content;
        }
    } @else if $size == md {
        @media (min-width: 900px) and (max-width: 1199px) {
            @content;
        }
    } @else if $size == lg {
        @media (min-width: 1200px) and (max-width: 1535px) {
            @content;
        }
    } @else if $size == xl {
        @media (min-width: 1536px) {
            @content;
        }
    }
}
@mixin block {
    background-color: variables.$block_color;
    border-radius: variables.$border_radius;
    color: variables.$text_color;
    z-index: 1;
    padding: 0.5rem;
}
@mixin truncate($rows) {
    text-overflow: ellipsis;
    overflow: hidden;
    -webkit-line-clamp: $rows;
    -webkit-box-orient: vertical;
    display: -webkit-box;
}

@mixin font-size-mixin(
    $phone-only: 12px,
    $tablet-portrait-up: 16px,
    $tablet-landscape-up: 20px,
    $desktop-up: 25px,
    $big-desktop-up: 32px
) {
    @include for-size(phone-only) {
        font-size: $phone-only;
    }
    @include for-size(tablet-portrait-up) {
        font-size: $tablet-portrait-up;
    }
    @include for-size(tablet-landscape-up) {
        font-size: $tablet-landscape-up;
    }
    @include for-size(desktop-up) {
        font-size: $desktop-up;
    }
    @include for-size(big-desktop-up) {
        font-size: $big-desktop-up;
    }
}

@mixin respond-to($breakpoint) {
    // If the key exists in the map
    @if map-has-key(variables.$breakpoints, $breakpoint) {
        // Prints a media query based on the value
        @media #{inspect(map-get(variables.$breakpoints, $breakpoint))} {
            @content;
        }
    }

    // If the key doesn't exist in the map
    @else {
        @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
          + "Available breakpoints are: #{map-keys($breakpoints)}.";
    }
}

@mixin themify($themes) {
    @each $theme, $map in $themes {
        .theme-#{$theme} & {
            $theme-map: () !global;
            @each $key, $submap in $map {
                $value: map-get(map-get($themes, $theme), "#{$key}");
                $theme-map: map-merge(
                    $theme-map,
                    (
                        $key: $value,
                    )
                ) !global;
            }
            @content;
            $theme-map: null !global;
        }
    }
}
@function themed($key) {
    @return map-get($theme-map, $key);
}
